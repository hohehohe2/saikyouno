[階層]
global
    show
        asset
            category
                assetName
                    variation(?)
        sequence
            shot
                userName

[アセット]
各階層にはアセットを配置することができる
各アセットはパスで特定される
アセットの各バージョンはメタデータと実ファイルデータを持つことができ、各アセットバージョンはapproveステータスを持つ。
また別途コンフィグと呼ばれる各種設定用メタデータを持つことができ、アセットバージョンとは別個に管理される。

[ベースアセット]
アセットはベースアセットを指定することができる。
ベースアセットとしてアセット階層の上下位置と無関係に階層内の任意のアセットを指定することができる。
ベースアセットは必須ではない。ベースアセットを持たないアセットは必ず独自アセットバージョンを持つ。
コンフィグは使用時にベースアセットのコンフィグとマージされる。

[アセットリンク]
アセットリンクは独自アセットバージョンを持たない特別なアセットで、必ずベースアセットを持つ。
アセットリンクはベースアセットのアセットバージョンを利用する。
ベースアセットもアセットリンクの場合、アセットバージョンを持つアセットを再帰的に探し出す。
アセットリンクは使用時に実アセットパスに置き換えられる。
    コンフィグアトリビュートでアセットパスとしてアセットリンクへのパスを指定するとfreezeするときに実アセットパスに置き換えられる。
参考：ショットに使いたいアセットなどを登録する時アセットリンクを指定するとオーバーライドしたい時にコピーして編集するだけですむ
参考：UIでアセットをドラッグするとアセットリンクができるのが理想。
参考：リンクからコピーへ変更するUIを提供する

[アセットパス書式]
書式
    (/)path/to/asset(:version)
    ..は親階層
    コンフィグアトリビュート（後述）では下記置換式を使うことができる
        "{v.latest}"はdone状態の最新バージョン、freeze時になければエラー
        "{v.latestApproved}"はアプルーブされた最新バージョン。freeze時になければエラー
        "{env.TEMP}"は環境変数TEMPの参照
        エクスプレッション：書式未定
    相対パスはそのアトリビュートが記述されたロケーションからの相対パス（要検討：リンクではリンク元？リンク先？）

[アセット名]
アセット名はアルファベットで始まりアルファベット、数字、アンダースコアをとることができる。
名前空間として:を使うことができる。
名前空間はスクリプト内では名前の一部だがUIでグループとして表示される。

[アセット]
アセットにはタイプがある。
アセットにはミュータブルなステータスがある
    例：ここにあるものが全て実装されるとは限らない
    - isArchived
    - isLocked
    - isAlive：もしゴミ箱を作るならゴミ箱に入っていればFalse
    - etc.etc.
アセットはリネームできない
    参考：Mayaリファレンス等でパスにアセット名が入っているとリネームするとリファレンスファイルが見つからないため

[アセットバージョン]
リンクでないアセットは複数のアセットバージョンを持つ
アセットバージョンはimmutableで継承しない
ファイルデータを持つことができる
アセットバージョンはアトリビュートを持つ。
    アトリビュートの例：
    - パブリッシュ日時
    - コメント
    - パブリッシュに成功したかどうか
    - 鬼マーク
        - 正常でないアセットには鬼マークがつく（鬼アイコンUI）
        - バリデーションに失敗してもリリースすることはできるが鬼がつく
        - 鬼がついたアセットバージョンを使ってパブリッシュされたアセットもまた鬼がつく
        - 使用不可にしないのはテスト、緊急対応のため
        - バリデーション例：
            - メッシュがtriangulateされているか
            - アトリビュート値が許容値におさまっているか
    - 鬼がついた理由
アセットバージョンは変更できない
    参考：アセットリネームと同様パスにバージョンが入っているとデータが壊れるため。
    実装ヒント：結局サイトが複数あると中央集権サーバーが必要になる。
アセットバージョンのステータス：
    - progress: アセットバージョン作成進行状況
        - created
        - started
        - done
        - errored
        - deleted
    - isApproved
以下検討中
    アセットバージョンにアセットタイプに定義されないダイナミックアトリビュートが作れるか
    アセットバージョンにアセットタイプに定義されないファイルが作れるか

[アセットタイプ]
アセットタイプは各アセットバージョン、コンフィグバージョンが持つアトリビュートを定義する
ファイルデータの名前とタイプ（mayaシーン, genericなど）を定義する
アセットタイプリビジョンが存在する。これは"アセットタイプ"定義のバージョンでアセットバージョンとは異なる
要検討：これはシリアライズされた別リビジョンのアセットバージョン変換用に使われPythonハードコードされる？
要検討：アセットタイプリビジョン用のクラスがあった方が良いか
アセットバージョン、コンフィグバージョン詳細表示ではアセットタイプ毎にユーザーがUIをカスタマイズすることができる。

[コンフィグ]
全アセットは複数のコンフィグバージョンを持つ
コンフィグバージョンはimmutableでベースアセットのコンフィグを継承する。
コンフィグバージョンはアトリビュートツリーを持つ。ファイルは持たない。
コンフィグにはタイプがあるがベースの"Config"タイプには（ほとんど）何もない、タイプは主にvalidationのため
動的なアトリビュートを作ることができる。
コンフィグバージョンは原則最新版のみ用いられる。古いバージョンは履歴用、内部キャッシュ用。
デパートメントオーバーライドはコンフィグアトリビュートのサブツリーとして実現する（TBD）。
使用前にフリーズされる（TBD）。
実装ヒント：コンフィグバージョンもイミュータブルなのでキャッシュできる。
実装ヒント：フリーズされたものは実行タイミングによるので履歴を残すならコマンドと共に覚えておく必要がある。
実装ヒント：コンフィグは名前の変更でリンクが切れないようにするため内部ではパスではなくidでベースを記憶する。
参考：用途
    - アセットバージョン作成時のパラメータとして。
    - アセットリンクによりオーバーライドされ、使用時にバリエーションとして
    - コンフィグオンリーアセットとして設定記述用

[アトリビュート]
アセットバージョン、コンフィグはアトリビュートを持つ
アトリビュートの属性
    - 型
        - bool
        - int
        - float
        - string
        - date
        - filePath
        - アセットパス
        ...
    - 配列かどうか
    - undefを許容するかどうか
    - デフォルト値（全てのアトリビュートはデフォルト値を持つ）
アトリビュートのステータス
    - 現在値
    - ロックされているかどうか
    - raw（string型にて、置換式を適用するかどうか、単なる文字列か）
名前が_で始まるアトリビュートはprivate, 継承しない
アトリビュート特定書式
    アトリビュート名[配列インデクス]
    アセットパスにつなげる場合は'.'で区切る
    例：
        /path/to/myAsset:3.agentName[3]
        myAssetのバージョン3が持つagentNameアトリビュートの配列インデクス3
filePathの相対指定について
    相対値を指定した場合起点はアセットバージョンのルートディレクトリ。
    任意のディレクトリにアクセスできてしまうので親ディレクトリ..は不可。
    自分のアセットが持っているファイルパス指定に用いられる。
置換式
    "{locationPath}"：そのアトリビュートが記述されているロケーション
    "{env.TEMP}"：環境変数TEMPの参照
    "{cfg.cfgpath.to.anotherConfig}"：このアトリビュートが属するコンフィグの他のアトリビュート値
        要検討：他のアセット/アセットバージョン/コンフィグアトリビュート値の記述方法
    エクスプレッション：書式未定
    その他、時刻、ユーザーなど適当に
    可能なものはアセットパスと記述を共通化させる

[コンフィグのフリーズ]
コンフィグは使用直前にフリーズ（イミュータブルにすること）される。
目的は私用途中に評価値変更されないこと、後から評価値を確認することができること
    - アセットバージョンをuuidに置き換える
    - アセットをフリーズ（フローズンアセット）し、uuidに置き換える
    要検討：いろんなクラスにfreeze()を追加。別uuidでCacheableでimmutableなインスタンスを作る
    要検討：gabuに特化した意味なので単純なクローンではない。

[アセットバージョンのアトリビュート制限]
アセットバージョンはイミュータブルなのでアトリビュート値は確定したもののみ
    ファイルパスは確定したパスのみ（環境変数は認めない）
    エクスプレッションは記述不可

[アセットパブリッシュ処理手順]
    最初にパブリッシュ予定のアセットバージョンを作成、progressをnot startedにしておく
    処理開始時にstarted
    処理終了時にdoneあるいはerrored
    farmジョブを手動でkillした場合など状態がnot startedかstartedになっているので正常終了と区別できる
    複数ユーザーが同時に同アセットをパブリッシュした場合もバージョンが被って同じファイルに書き込みするなどの心配がない

[コマンド]
実行される手順に関わらず処理をコマンドとして統一する
    ユーザーのボタン押下による処理実行
    イベントによる自動実行
        応用例：アトリビュートを更新し、アセットバージョン更新可能性をUIでユーザーに伝えるなど
バッチ処理は単体コマンド実行の列として記述される。
アイデア：ボタン実行されるコマンドをコンフィグアトリビュートにする。コンフィグにはpythonスクリプトへのパスを書く
ユーザーオプションは専用の新たなコンフィグにする。継承の最終段階

[自動実行]
イベント通知
    イベント発行（アセットバージョン作成など、システムが自動で行う）
    イベントの受け取り
    イベントに応じたコマンド実行
イベントオブジェクト
    イベント発生ロケーション
    イベントの種類
        assetPublished
            newAssetVersion
        configUpdated
            newConfigVersion
        locationModified
            what:
                asset
                config
                link
            how:
                created
                deleted

[自動実行コンフィグ]
    AutomationConfigタイプを作る
    automationConfigという名前で一階層にひとつだけ作ることができる。
    上階層のConfigで設定すると継承した全ての階層で設定される
    アトリビュート：
        実行コマンド
        コマンド引数。ヒント：アトリビュートはツリー構造なので簡単に記述できる
        実行場所（ローカル、farm）。実装ヒント：実装次第だがコマンド引数になればいらない
        フィルタin
            アトリビュート
                名前含む
            イベントタイプ
            イベント発生場所
            イベント発生場所のアトリビュート
        実行タイプ
            自動実行
            ユーザー通知
                通知内のボタンを押すと処理が開始される
        フィルタはワイルドカードを含む。実装ヒント：DBフレンドリーに
    実装ヒント：単純に全階層のConfigを巡回すると遅すぎるので継承を考えず本体Configのみで処理する。
    実装ヒント：バージョンアップされたautomationConfig(locationAにあるとする)について、その階層より下階層に存在する全ての
    実装ヒント：automationConfigロケーションを調べる
    実装ヒント：locationAのautomationConfigをオーバーライドされない全階層について適用（ループさせずにDBでぱぱっと）
    実装ヒント：オーバーライドされたautomationConfigについて再帰的に処理する
    要検討：アセットコンフィグにも設定可能にするか？するにしても後バージョンで

[デバッグ機能：コマンド再実行]
次のどちらか、あるいは両方
    フリーズされたコンフィグの一部（ユーザー、コメント、日時など）を変えて再実行
    コンフィグを再フリーズして実行

To save disk space and release processing time, Data can be shared across different versions of the same asset using sym link.
Only assertVersions in the same asset can share data, assetVersions in different assets cannot.
Attributes cannot be shared. When you update attribute on an assetVersion, the new assertVersion can have the same disk data as the previous assertVersion, when you update diskData only, attributes are copied from the previous assetVersion.


[tool versioning]
Tools are versioned as major.minor.patch so that
    major: large changes
    minor: small changes
    patch: changes that maintain backward compatibility

[command]
When a user asks something to the pipeline a Python script is generated using a script template.
    user pressed 'release' button -> release script generated -> run on farm or locally
template replacement with element attributes.
template replacement example:
    "{config.someConfigAttributeName}".
    "{asset.someAssetAttributeName}".
Script should be able to run any time the same way, even after waiting a few hours on the farm, or several weeks later for debugging. Scripts can never look up attributes at run time.
Asset inheritance needs to be resolved immediately, if an asset is overriden later it shouldn't be used.

[validation]
Each asset type has two set of validators that runs before and after assetVersion release. Even if validation fails it still can be released but it is marked unreliable with the reason so that later workflow can see that asset  was not cleanly released. This feature is for testing and for occasional urgent case. Unreliable are propagated, ie. assets that are dependent on or uses another unreliable assets are also marked as unreliable.
examples:
    preReleaseValidations: if a mesh is triangulated
    postReleaseValiations: if a geo cache has been created correctly during the release process

--------------------Implementation

[scriptExecuter]
Pipleline lib offers several script executor functions.
runOnFarm(): Run script on the farm
runOnMaya(): Run script on Maya
runOnDebugMode(): Run script with pdb
You can nest these functions, eg. use runOnFarm(runOnMaya(runOnDebugMode(releaseScript))) to debug   a release script that runs on maya on the farm.



===========

lod
variation
bundle
release, publish
asset copy, deep copy
dependencyPath attribute type
data caching
interface
atogen
error chat log
notification when new version released
purge block request
batch processing
    - release depending assets
    - renaming before delivery
    - ingesting
tool build depenency / auto rebuild with c++ library version?

Should assetAttribute s be inherited/merged like configAttribute s? -> no because it cannot be immutable.
asset shouldn't be in a shot by reference, asset should be only in asset

参照されてるとデリートできない問題
    assets should still be deletable even if they are referenced. It's similar to multi-site syncing problem.
    pipeline should offer check (and recover) system to ensure all the depedent asset exist.

group
    - option1: part of hierarchy ie. global-show-sequence-shot-group?
        simple
        want to put configs into a group but shouldn't
    - option2: purely ui view thing. stuffs in a group is in the shot hierarchy
        'build' takes one, so asset can have only two hierarchies
    option 2 is better.

if an asset type should be created or not eg."cache usd", "anim cache usd", "layout usd", "model usd", or  one big "usd" asset type with "type" tag or "cache usd" type subclassing "usd"?
usd and bundle. with usd, is bundle still a must?

asset type version control, what if attribute added? what if attribute deleted? convert?
Private asset/config(asset or config that are not inherited)
バージョニング

メジャー、大きな変更
マイナー、小さな変更
パッチ、互換性のある変更
自動更新される変更

runtime/build dependency
    runtime: assets needed to an asset to work(sim maya scene -> ge cache etc.)
    build: assets needed to recreate the asset (geo cache->maya scene etc.)

ユーザーローカル疑似アセット：リリース前レンダリングテストとかを簡単にするため。パスはどうする？
アセットをショットに入れて何が入ってるかを見せたいけどどう作ればいい？
 -> 特殊なアセットタイプ（ショットデスクリプションアセットタイプ）を作り、ExpandしたらUI上で疑似的に見せる(or アセットリファレンス？下に記述あり)

アセットとコンフィグを統一して2種類のメタデータを持つようにしてもいいか？
->コンフィグが値を継承してベースで値が変わるとimmutableにならないから無理か。
ショットデスクリプションみたいにconfigが自然なものでも実ファイルを持ちたい場合は別にアセット作るしかないか？
アセットとコンフィグを統一し、実ファイルはメタデータのファイルパスvalue、例えばusdFilePath="./someFile.json"（自分のアセットバージョンが持ってるファイルの意味）とかは？configメタデータに記述されていれば実ファイルも継承/オーバーライドできるし、assetメタデータは継承しないからそこに記述されていれば実ファイル継承しないし。
うーんベースがバージョンアップした場合子configの値も事実上変化したいけどassetとconfigを統一した場合過去バージョンのconfigの意味が曖昧になってしまうのか（その時点での継承/オーバーライドされたimmutableなconfigにしたいけどベースconfigの変化を考えると「その時点」というのがベースの変化前か変化後かわからない）。
configバージョンはimmutable、特定のベースバージョンを継承、ベースがバージョンアップした時子は自動バージョンアップにする？自動は嫌って場合も出てくるだろうしなあ。自動、手動選択はややこしいいし。それにshowレベルでの変更数千ショットのあっぷでーとになるし。うーん。
ショットデスクリプションは過去バージョンはimmutableにしたい。普通の設定ファイルなどでは最新は常にベースの値を反映させたい。
ショットデスクリプションがimmutable:レンダリング途中でショットに入ってるキャラが急に増えないでほしいため。また過去のあるバージョンのショットには常に同じキャラが入っていてほしいため。
やっぱりアセットとconfigの統合はなしだな。ショットデスクリプションはベースアセットを参照、変更を個別ツール実装側で検知してその都度子アセットにベースの継承をfreezeした状態で保持するのがいい。いやーそれじゃ統一と同じで実装が個別になるだけじゃない？うーんうーん、あ、UIレベルでforce push inherit and merge this metadata tree to child assets(適当)ボタン作ってベースで実行すればいいのか。アセットバージョンアップするとして。

アセットリファレンスは欲しいなー。ショットごとのリグのオーバーライドとか。
...ちょっと待てショットにあるキャラのリグが./someRigAssetVersionだとバージョンが確定しないのか。アセット継承も同じ問題が出てくるな。
例えばshowにあるアセットがshotに継承されてた時、後からsequenceレベルに同じ名前でアセットを作るとshotに継承されるアセットが変わってしまう。shotにあるアセットのバージョンとして別の場所から参照されているとアセットがsequenceのものに置き換わったり、sequenceのアセットには参照されてるバージョンがなかったり問題が起こる。
- アセットバージョンがイミュータブルにならない。
- アセットバージョン間の依存性が決定できない。
これはちょっと問題大きいぞ。いっそアセットは継承せず、さらにassetAttributeに別のアセットへのパスを書く場合バージョン指定必須にする？
アセットはリファレンスとして明示的に継承する。リファレンスはUIを変えて敢えて何もできないようにする。アセットattributeはバージョン付きのパスのみ持てるようにする。configattributeはバージョンなしでも可。こんな感じ？

- referece->shortcutと名称を変える。アセットリンクは実データ（メタデータ含む）を持たない、バージョンも持たない
- dcc representing UI window

いやーややこしいのでアセットの継承をなくすか。上の
「アセットリファレンスは欲しいなー。ショットごとのリグのオーバーライドとか」
このアイデアもなくす。正確にはオーバライドはできるけどショットデスクリプションアセットタイプで明示的に指定する必要がある。
それがいいな。

必要ツール（優先度順
[外部ツール]
[内部ツール]
- チケット
- wiki
- ツールリリース、アンリリース
- コード整形
- CI

ふむアセット（アセットバージョンでなく）にconfig持たせてconfigオブジェクトと同様に継承させるのはありか。するとアセットとコンフィグオブジェクトを統一させることもできる。configはバージョンを持たせるので１つのアセットに対してアセットバージョンとコンフィグバージョンの２つを独立に持たせるという見方もできるがUIを工夫する必要ある。
- アセットバージョン：メインのデータ。アトリビュートあり。immutable。継承しない。
- コンフィグバージョン：継承あり、原則最新バージョンのみ使う。バージョンは履歴とトラッキングのみに使用。
ややこしいかなー？

コンフィグはリリースコメントなしでもいいか。
単一のアセットのみに適用させるアトリビュートはアセットのコンフィグに入れ、複数のアセットで共有するアトリビュートは独立させたコンフィグオブジェクトにする。

インターフェイスのアイデアをどう組み込むか

アセットバージョンはアトリビュート、リードライトのステータスを持つ。アセットはコンフィグを持つ。
・・・やっぱりアセットとコンフィグは共有しない。理解を妨げる過度な汎化は危険！
たぶん"アセット名+Config"でアセット毎のconfigを意味するように命名規則を設ける。
リネームとかフレームワーク側で補助するかも

Configは使う前に時間変化する値をfreezeする -> frozen config
- path
- 環境変数（環境変数タイプのアトリビュートが必要）

これでアセットのリファレンスを作ることができる
また例えばconfigにカレントpathをバージョン抜きで指定してその時点での最新approvedを使うように指定できる
（新approvedでない場合はバージョン指定する）


[フレームワーク上に用意する便利ツール]
- バンドル（アセットタイプ）
-- アセットタイプUI
- ショットエンターツール（ツールバージョンコンフィグ使用）
- ショットデスクリプションアセットタイプ
実装ヒント：アセット、コンフィグの名前は単なるアトリビュートで、idで管理される（プロトタイプ実装からsqlite必須）


[ローカルリポジトリアイデア：採用しないことに決定！]
サーバーはbare gitリポジトリを持つ。ファイルはconfigとアセットconfig、内部情報（実ファイルパスなど）のみ
実ファイルは別にディレクトリ階層がありそこに保存される。
アトリビュートのみの変更によるアセットバージョンのアップデートでは実ファイルrootDirを共有する
書くユーザーはローカルリポジトリをクローン、pullしブランチを作る。masterへの反映は
    for pushに成功するまで
        for マージに成功するまで
            masterをpull
            masterに変更をマージ。
            マージに失敗したら成功するまで新たに作成した全てのアセットバージョンをバージョンナンバーをインクリメントする。
                例えばpull時v3まであって自分がv4,v5,v6を作り、push時にv5までmasterにあればv4,5,6をv6,7,8にする
                ここがダメ！アトリビュートのアセットバージョンが別物を指すようになってしまう。
        push
        成功したら新たに追加したバージョンのシンボリックリンクを作成（既にあればエラーになるが無視）
注意：タイミングによってpullして調べたアセットバージョンのシンボリックリンクが存在しないかもしれない
注意：存在しないときは自分でシンボリックリンクを作成しちゃう（他ユーザーが作って既にある時はエラーになるが無視）
注意：チェックはコンフィグのフリーズ時
要検討：古い実ファイルのガベージコレクションはどうする？

repo/
    root/
      ---path/to/shotA/
        ---rootDirV1.txt: Xbdda
        ---rootDirV2.txt: 3cFkD
        ---rootDirV3.txt: hLV6R
fileRootDir/
  ---path/to/shotA/
      ---XBdda/
      ---533GZ/
      ---hBzzw/
      ---v1  -> XBddaへのシンボリックリンク
      ---v2  -> .....へのシンボリックリンク



==========


アセット
    - id
    - ベースアセットid
    - パス
    - アセットタイプ
    - isLink
        Trueなら独自のアセットバージョンホルダーがある
        Falseならベースをたどって最初にLinkでないものを使う

    - コンフィグバージョンズ（必ず存在）
        - コンフィグバージョン
            - アトリビュートツリー

    - アセットバージョンズ（LinkならNone）
        - 凍結アトリビュートツリー
        - ステータス

バージョンホルダー
    コンフィグバージョンホルダー
    アセットバージョンホルダー

アセットタイプ
    - コンフィグバージョンタイプ
    - アセットバージョンタイプ


アトリビュートタイププラグイン
    型
    defaultValue
    isNullable
    isDeletable
    isReadOnly
    validate()
    freeze()

アトリビュート
(name):
    - type: className
    - default: value
    - isNullable: value
    - isDeletable: value
    - isReadOnly: value

＝＝＝＝＝＝＝＝

asset
    int id(p)
    int assetLayerId
    int parentId
    int configId

assetVersion
    int id(p)
    int assetId
    attrTreeId
    int version
    bool isApproved

configVersion
    int id(p)
    attrTreeId

attrTree
    int id(p)
    int uuid
    json keyValue

assetLayer
    int id(p)
    int parentAssetLayerId
    int parentLevel
    char* name

紙に
クラス図とAPI
アセットタイプ詳細（アトリビュートツリーのノードで各アトリビュートの型を設定するとか）

要検討：アセットをコンフィグのようにフリーズさせコンフィグとアセットを同一視できないか。
要検討：その場合アセットメタデータはフリーズ前後の両方をバージョン管理する必要がある。
